#!/bin/bash
#
# This is a simple kernel hook to populate the systemd-boot entries
# whenever kernels are added or removed.
#

LINUX_TITLE="CHANGEME"
# Ex: "Ubuntu LTS"
# Title for boot OS

LINUX_TITLE_DIR="CHANGEME"
# Ex: "ubuntu-lts"
# Same as BTRFS subvolume dir: /ubuntu-lts/@
# /efi/loader/entries/ubuntu-lts-latest.conf (& */ubuntu-lts-legacy.conf)

# The UUID of your disk.
# If is your LUKS on BTRFS select crypto_LUKS UUID
UUID="CHANGEME"
# Ex: "ab549b39-9b1c-422f-bb92-6070379e9f50"

# The LUKS volume slug you want to use, which will result in the
# partition being mounted to /dev/mapper/CHANGEME.
VOLUME="CHANGEME"
# Ex: "LinuxCrypt" (from /dev/mapper/LinuxCrypt)

# Any rootflags you wish to set.
# ROOTFLAGS="CHANGEME"
ROOTFLAGS="subvol=/${LINUX_TITLE_DIR}/@"
# Ex: "subvol=/${LINUX_TITLE_DIR}/@"  =>  "subvol=/ubuntu-lts/@"




# Our kernels.
KERNELS=()
FIND="find /boot -maxdepth 1 -name 'vmlinuz-*' -type f -not -name '*.dpkg-tmp' -print0 | sort -Vrz"
while IFS= read -r -u3 -d $'\0' LINE; do
    KERNEL=$(basename "${LINE}")
    KERNELS+=("${KERNEL:8}")
done 3< <(eval "${FIND}")

# There has to be at least one kernel.
if [ ${#KERNELS[@]} -lt 1 ]; then
    echo -e "\e[2msystemd-boot\e[0m \e[1;31mNo kernels found.\e[0m"
    exit 1
fi

rm -rf /boot/efi/EFI/${LINUX_TITLE_DIR}/
mkdir /boot/efi/EFI/${LINUX_TITLE_DIR}/

# Copy the latest kernel files to a consistent place so we can keep
# using the same loader configuration.
LATEST_VERSION="${KERNELS[@]:0:1}"
echo -e "\e[2msystemd-boot\e[0m \e[1;32m${LATEST_VERSION}\e[0m"
for FILE in config initrd.img System.map vmlinuz; do
    cp "/boot/${FILE}-${LATEST_VERSION}" "/boot/efi/EFI/${LINUX_TITLE_DIR}/${FILE}-${LATEST_VERSION}"
    cat << EOF > /boot/efi/loader/entries/${LINUX_TITLE_DIR}-latest.conf
title   ${LINUX_TITLE} ${LATEST_VERSION} (latest)
linux   /EFI/${LINUX_TITLE_DIR}/vmlinuz-${LATEST_VERSION}
initrd  /EFI/${LINUX_TITLE_DIR}/initrd.img-${LATEST_VERSION}
options cryptdevice=UUID=${UUID}:${VOLUME} root=/dev/mapper/${VOLUME} ro quiet splash rootflags=${ROOTFLAGS}
EOF
done

# Copy any legacy kernels over too, but maintain their version-based
# names to avoid collisions.
if [ ${#KERNELS[@]} -gt 1 ]; then
    LEGACY_LIST=("${KERNELS[@]:1}")
    for LEGACY_VERSION in "${LEGACY_LIST[@]}"; do
        echo -e "\e[2msystemd-boot\e[0m \e[1;32m${LEGACY_VERSION}\e[0m"
        for FILE in config initrd.img System.map vmlinuz; do
            cp "/boot/${FILE}-${LEGACY_VERSION}" "/boot/efi/EFI/${LINUX_TITLE_DIR}/${FILE}-${LEGACY_VERSION}"
            cat << EOF > /boot/efi/loader/entries/${LINUX_TITLE_DIR}-legacy.conf
title   ${LINUX_TITLE} ${LEGACY_VERSION}
linux   /EFI/${LINUX_TITLE_DIR}/vmlinuz-${LEGACY_VERSION}
initrd  /EFI/${LINUX_TITLE_DIR}/initrd.img-${LEGACY_VERSION}
options cryptdevice=UUID=${UUID}:${VOLUME} root=/dev/mapper/${VOLUME} ro quiet splash rootflags=${ROOTFLAGS}
EOF
        done
    done
fi

# Success!
exit 0
